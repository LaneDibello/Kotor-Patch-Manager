# KotOR Patch Hooks Template
# Choose SIMPLE or DETOUR based on your needs

# ==============================================================================
# SIMPLE HOOK (Direct byte replacement - no DLL required)
# ==============================================================================
# Use this for: changing constants, NOPs, modifying jumps, etc.

# [[hooks]]
# # Memory address to modify (hex format)
# address = 0x00401234
#
# # Hook type
# type = "simple"
#
# # Original bytes at this address (for verification)
# # Use a disassembler to get these
# original_bytes = [0x6A, 0x64]
#
# # New bytes to write (MUST be same length as original_bytes)
# replacement_bytes = [0x6A, 0xC8]

# ==============================================================================
# DETOUR HOOK (Calls your C++ function - DLL required)
# ==============================================================================
# Use this for: complex logic, new features, accessing game state

# [[hooks]]
# # Memory address to hook (hex format)
# address = 0x005cb41c
#
# # Function name exported from your DLL
# function = "MyHookFunction"
#
# # Hook type
# type = "detour"
#
# # Original bytes at this address (minimum 5 bytes for DETOUR)
# # Use a disassembler to get these
# original_bytes = [0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x20]
#
# # Optional: Extract parameters from game state
# [[hooks.parameters]]
# source = "eax"        # Register: eax, ebx, ecx, edx, esi, edi, ebp
# type = "pointer"      # Type: int, uint, pointer, float, byte, short
#
# [[hooks.parameters]]
# source = "[esp+8]"    # Stack location
# type = "int"
#
# # Optional: State preservation (default: true)
# preserve_registers = true
# preserve_flags = true
#
# # Optional: Don't restore specific registers
# exclude_from_restore = []

# ==============================================================================
# Add more hooks below (you can mix SIMPLE and DETOUR in one file)
# ==============================================================================
