namespace KPatchCore.Models;

/// <summary>
/// Represents the runtime configuration (patch_config.toml) that the C++ patcher reads
/// This is generated by KPatchCore during installation
/// </summary>
public sealed class PatchConfig
{
    /// <summary>
    /// List of enabled patches with their hooks
    /// </summary>
    public List<EnabledPatch> Patches { get; init; } = new();

    /// <summary>
    /// Represents a single enabled patch in the configuration
    /// </summary>
    public sealed class EnabledPatch
    {
        /// <summary>
        /// Patch identifier (for debugging/logging)
        /// </summary>
        public required string Id { get; init; }

        /// <summary>
        /// Path to patch DLL relative to game directory (e.g., "patches/widescreen-fix.dll")
        /// </summary>
        public required string Dll { get; init; }

        /// <summary>
        /// List of hooks for this patch
        /// </summary>
        public List<Hook> Hooks { get; init; } = new();
    }

    /// <summary>
    /// Adds a patch to the configuration
    /// </summary>
    public void AddPatch(string id, string dllPath, IEnumerable<Hook> hooks)
    {
        Patches.Add(new EnabledPatch
        {
            Id = id,
            Dll = dllPath,
            Hooks = hooks.ToList()
        });
    }

    /// <summary>
    /// Gets the total number of hooks across all patches
    /// </summary>
    public int TotalHooks => Patches.Sum(p => p.Hooks.Count);

    public override string ToString() =>
        $"{Patches.Count} patches, {TotalHooks} hooks";
}
